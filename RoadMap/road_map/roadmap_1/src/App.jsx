import React, {useState} from 'react'

export default function App(){
  const [task, setTask] = useState('')
  const [profession, setProfession] = useState('Software Engineer')
  const [loading, setLoading] = useState(false)
  const [roadmap, setRoadmap] = useState('')
  const [error, setError] = useState(null)

  const professions = [
    'Software Engineer',
    'Product Manager',
    'Data Scientist',
    'UX Designer',
    'DevOps Engineer',
    'Researcher',
    'Custom (Expert)'
  ]

  async function handleGenerate(){
    if(!task.trim()){
      setError('Please enter a task or problem to solve.')
      return
    }
    setError(null)
    setLoading(true)
    setRoadmap('')
    try{
      const res = await fetch('/api/roadmap',{
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({task, profession})
      })
      if(!res.ok){
        const err = await res.json().catch(()=>({message:res.statusText}))
        throw new Error(err.error || err.message || 'Server error')
      }
      const data = await res.json()
      setRoadmap(data.roadmap || '')
    }catch(e){
      setError(e.message)
    }finally{
      setLoading(false)
    }
  }

  function handleCopy(){
    navigator.clipboard?.writeText(roadmap || '')
  }

  return (
    <div className="container">
      <div className="card">
        <div className="header">
          <div>
            <div className="title">Roadmap Generator</div>
            <div className="small">Enter a task and get a profession-style plan generated by your LLM.</div>
          </div>
          <div className="small">Tip: Keep prompts specific for better results ✨</div>
        </div>

        <div style={{marginBottom:12}}>
          <label className="small">Task / Problem</label>
          <textarea className="input" value={task} onChange={e=>setTask(e.target.value)} placeholder={"E.g. Build a personal budgeting app that syncs with bank statements."} />
        </div>

        <div className="form-row">
          <div style={{flex:1}}>
            <label className="small">Profession style</label>
            <select className="input" value={profession} onChange={e=>setProfession(e.target.value)}>
              {professions.map(p=> <option key={p} value={p}>{p}</option>)}
            </select>
          </div>
          <div style={{width:150,display:'flex',alignItems:'flex-end'}}>
            <button className="button" onClick={handleGenerate} disabled={loading}>{loading? 'Generating...':'Generate Roadmap'}</button>
          </div>
        </div>

        {error && <div style={{color:'#ffb4b4',marginTop:8}}>{error}</div>}

        {roadmap && (
          <div style={{marginTop:14}}>
            <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:8}}>
              <div className="small">Roadmap (generated)</div>
              <div style={{display:'flex',gap:8}}>
                <button className="copy" onClick={handleCopy}>Copy</button>
              </div>
            </div>
            <div className="result">
              {/* Render simple numbered steps by splitting on newlines. Keep original formatting if LLM uses bullets. */}
              {roadmap.split('\n').map((line, i) => (
                <div key={i} className="step">{line || <span style={{opacity:0.4}}>&nbsp;</span>}</div>
              ))}
            </div>
          </div>
        )}

        <div className="footer">Backend proxy used — your API key stays secret. Want authentication or saving roadmaps? I can add it.</div>

      </div>
    </div>
  )
}